Você é um engenheiro full-stack sênior especializado em Next.js 14+, React 19,
TypeScript, TailwindCSS 3.4 e shadcn/ui.
Todo o código deve compilar com npm i && npm run build.

Gere uma aplicação financeira que atenda aos seguintes requisitos.

──────────────────────
📝 REQUISITOS PRINCIPAIS
──────────────────────

SSR ATIVADO
• Use o roteador app/ com export const dynamic = "force-dynamic".

TailwindCSS v4 totalmente configurado (tailwind.config.ts, JIT).

shadcn/ui instalado; wrapper src/ui/ShadThemeProvider.tsx (tema "light"); exemplos de Button, Card, Input, DateRangePicker (composable headless shadcn).

Dashboard Financeiro (/)
• Header fixo “💹 TechStocks Pro” + navegação fictícia.
• Hero com CTA “Adicionar ação”.
• Stock Grid SSR: NVDA, GOOG, AMZN, MSFT, META.
– Mostrar preço, variação diária (%), última atualização.
– Preço atual vindo do endpoint Alpha Vantage:
https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${SYMBOL}&apikey=${process.env.ALPHA_VANTAGE_KEY}.
• Gráfico Histórico: componente StockChart.tsx (Recharts AreaChart) exibindo os preços de fechamento dos últimos 12 meses;
– Buscar via TIME_SERIES_DAILY_ADJUSTED & outputsize=full;
– Permitir filtrar período com DateRangePicker (ex.: YTD, 6 M, 1 M, intervalo personalizado).
– Filtragem executada no cliente após o fetch SSR.
– Quando process.env.FETCH_STOCKS_OFFLINE === "true" usar src/lib/mockSeries.ts.

Boas Práticas
• ESLint, Prettier, TypeScript strict, next/font/google (Inter), next/image quando aplicável.
• Lazy-load dos gráficos (React.lazy + Suspense).
• Metas SEO padrão (next/seo) e ARIA em todos os controles interativos.

Testes — __tests__/dashboard.test.tsx (Vitest + Testing Library) verifica renderização do gráfico NVDA e a alteração ao ajustar o filtro.

Scripts no package.json — dev, build, start, lint, test, type-check.

Dockerfile multi-stage (node:lts-alpine) gerando imagem slim.

──────────────────────
📁 ESTRUTURA ESPERADA
──────────────────────
/
├─ app/
│ └─ page.tsx # dashboard SSR
├─ src/
│ ├─ components/
│ │ ├─ StockSparkline.tsx
│ │ └─ StockChart.tsx
│ ├─ ui/ # ShadThemeProvider + DateRangePicker
│ ├─ lib/
│ │ ├─ fetchAlpha.ts # camada de dados
│ │ └─ mockSeries.ts
│ └─ styles/
├─ public/
├─ tests/
├─ tailwind.config.ts
├─ postcss.config.js
└─ Dockerfile

──────────────────────
🌱 EXTRAS OPCIONAIS (se caber nos tokens)
──────────────────────
• .env.example com ALPHA_VANTAGE_KEY, ALPHA_VANTAGE_URL, FETCH_STOCKS_OFFLINE.
• GitHub Actions CI (lint → test → build).

──────────────────────
🎨 [template-css]
──────────────────────
// file: src/styles/theme-overrides.css
{{css_template}}

──────────────────────
IMPORTANTE
──────────────────────
• Use apenas imports relativos dentro de src/.
• Garanta que npm run build seja concluído sem erros.
• Mantenha comentários inline no mínimo.

LET’S CODE!